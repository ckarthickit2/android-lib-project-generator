apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
//apply plugin: 'java'
//apply plugin: "org.jetbrains.kotlin.jvm"
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'com.github.dawnwords.jacoco.badge'

android {
  compileSdkVersion versions.androidCompile
  buildToolsVersion versions.androidBuildTools

  compileOptions {
    sourceCompatibility versions.javaVersion
    targetCompatibility versions.javaVersion
  }

  kotlinOptions {
    jvmTarget = versions.javaVersion
  }


  defaultConfig {
    minSdkVersion versions.androidMinSDK
    targetSdkVersion versions.androidTargetSDK
    testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
  }

  buildTypes {
    debug {
      debuggable true
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt')
    }
    release {
      debuggable false
      minifyEnabled true
      //~/Library/Android/sdk/tools/proguard -> Default Proguard Location on MAC
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-release.pro'
    }
  }

  //https://www.lordcodes.com/posts/testing-on-android-using-junit-5
  //If our unit tests are only going to be ran on the JVM, no Robolectric or Android required
  testOptions {
    unitTests.all {
      useJUnitPlatform()
    }
  }

}

dokka {
  moduleName = 'templatelib-lib'
  outputFormat = 'gfm' //(html | javadoc | html-as-java | markdown (gfm | jekyll) | kotlin-website*
  outputDirectory = "$buildDir/javadoc"

  // List of files with module and package documentation
  // https://kotlinlang.org/docs/reference/kotlin-doc.html#module-and-package-documentation
  includes = ['../README.md']

  // Suppress a package
  packageOptions {
    prefix = "templatepackage.templatelib.BuildConfig" // will match internal and all sub-packages of it
    suppress = true
  }


  def dokkaTask = tasks.findByPath('dokka')
  def updateDokkaDocsTask = tasks.create('updateDokkaDocumentation') {
    group "Documentation"
    description "Updates the Documentation to `docs` folder of the Project root"
    doLast {
      delete fileTree("$rootDir/docs").matching {
        include '**/?*.md'
        include '**/?*.html'
      }
      delete "$rootDir/docs"
      copy {
        from("$buildDir/javadoc/templatelib-lib") {
          include '**/?*.md'
          include '**/?*.html'
        }
        into "$rootDir/docs/"
      }
    }
  }
  updateDokkaDocsTask.mustRunAfter dokkaTask
  dokkaTask.finalizedBy(updateDokkaDocsTask)


}

jacocoBadgeGenSetting {
  jacocoReportPath  "$buildDir/reports/jacoco/debug/jacoco.xml"
  readmePath "$rootDir/README.md"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
  kotlinOptions {
    jvmTarget = versions.javaVersion
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation "${deps.kotlin.stdLib.jdk8}:$versions.kotlin" //org.jetbrains.kotlin:kotlin-stdlib-jdk7
  implementation "${deps.kotlin.coroutines.core}:$versions.kotlinCoroutines" //kotlinx-coroutines-core

  //android specific annotations
  implementation "${deps.androidx.annotation}"

  //junit5
  testImplementation "${deps.junitJupiter.api}"
  testImplementation "${deps.junitJupiter.params}"
  testRuntimeOnly("${deps.junitJupiter.runtimeLauncher}")
  testRuntimeOnly("${deps.junitJupiter.runtimeEngine}")
  testRuntimeOnly("${deps.junitJupiter.runtimeVintageEngine}")
}
